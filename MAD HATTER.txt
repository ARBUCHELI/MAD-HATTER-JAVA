Mad Hatter

 

import java.util.Scanner;
import java.io.File;

public class Book
{
    private String bookText;

    public Book(String fileName)
    {
        readBook(fileName);
    }

    /**
     * Calculates the number of characters (as in letters and
     * symbols, not people) in the book.
     * @return the number of letters and symbols in the book.
     */
    public int getNumCharacters()
    {
        return bookText.length();
    }

    /**
       Finds where the string "Mad Hatter" occurs for the first time in the book.
       @return the location of the first occurrence of the string
    */
    public int firstOccurrenceOfMadHatter()
    {
        return bookText.indexOf("Mad Hatter");
        // TODO: Complete this method
        //
        // Check the fact sheet. There is a String function
        // that can do this for you.
        
    }

    /**
     * A method to help read the book out of the file.
     * You don't have to read this unless you want to.
     * the "try" and "catch" are java's way of dealing with
     * runtime errors or "exceptions".
     */
    public void readBook(String fileName)
    {
        bookText = "";
        try
        {
            Scanner file = new Scanner(new File(fileName));
            while (file.hasNextLine())
            {
                String line = file.nextLine();
                bookText += line + "\n";
            }
            file.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
}

import java.util.Scanner;
import java.io.File;

public class Book
{
    private String bookText;

    public Book(String fileName)
    {
        readBook(fileName);
    }

    /**
     * Calculates the number of characters (as in letters and
     * symbols, not people) in the book.
     * @return the number of letters and symbols in the book.
     */
    public int getNumCharacters()
    {
        return bookText.length();
    }

    /**
       Finds where the string "Mad Hatter" occurs for the first time in the book.
       @return the location of the first occurrence of the string
    */
    public int firstOccurrenceOfMadHatter()
    {
        // TODO: Complete this method
        //
        // Check the fact sheet. There is a String function
        // that can do this for you.
        int mad = bookText.indexOf("Mad Hatter");
        return mad;
    }

    /**
     * A method to help read the book out of the file.
     * You don't have to read this unless you want to.
     * the "try" and "catch" are java's way of dealing with
     * runtime errors or "exceptions".
     */
    public void readBook(String fileName)
    {
        bookText = "";
        try
        {
            Scanner file = new Scanner(new File(fileName));
            while (file.hasNextLine())
            {
                String line = file.nextLine();
                bookText += line + "\n";
            }
            file.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
}




 

Get the First Sentence

 
Fact sheets: https://www.udacity.com/wiki/cs046/factsheets
(Look for Strings)
Ooops. We meant "Mad Hatter" not "Mad hatter" :)
Fact sheets: https://www.udacity.com/wiki/cs046/factsheets
(Look for Strings) note: "Mad hatter" should have been "Mad Hatter".

// BlueJ Project: lesson4/book3
// Video: Working with the Book Text

import java.util.Scanner;
import java.io.File;

public class Book
{
    private String bookText;

    public Book(String fileName)
    {
        readBook(fileName);
    }

    /**
     * Gets the first sentence of this book.
     * @return the first sentence (including the period) of this book.
     */
    public String getFirstSentence()
    {
        // TODO: Return the first sentence
        return bookText.substring(0,(bookText.indexOf(".")+1));
    }

    /**
     * Calculates the number of characters (as in letters and
     * symbols, not people) in the book.
     * @return the number of letters and symbols in the book.
     */
    public int getNumCharacters()
    {
        return bookText.length();
    }

    /**
     * Finds where the string "Mad Hatter" occurs for the first time in the book.
     * @return the location of the first occurrence of the string
     */
    public int firstOccurrenceOfMadHatter()
    {
        return bookText.indexOf("Mad Hatter");
    }

    /**
     * A method to help read the book out of the file.
     * You don't have to read this unless you want to.
     * The "try" and "catch" are java's way of dealing with
     * runtime errors or "exceptions."  For more info, see
     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html
     */
    public void readBook(String fileName)
    {
        bookText = "";
        try
        {
            Scanner file = new Scanner(new File(fileName));
            while (file.hasNextLine())
            {
                String line = file.nextLine();
                bookText += line + "\n";
            }
            file.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
}

 

Get the Second Sentence

Fact sheets: https://www.udacity.com/wiki/cs046/factsheets
(Look for Strings)
Ooops. At 0:39 (the last time we see the getSecondSentence() method), it's missing a )
 

// BlueJ Project: lesson4/book4
// Video: Working with the Book Text

import java.util.Scanner;
import java.io.File;

public class Book
{
    private String bookText;

    public Book(String fileName)
    {
        readBook(fileName);
    }

    /**
     * Gets the first sentence of this book.
     * @return the first sentence (including the period) of this book.
     */
    public String getFirstSentence()
    {
        int endOfSentence = bookText.indexOf(".");
        return bookText.substring(0, endOfSentence + 1);
    }

    /**
     * Gets the second sentence of this book.
     * @return the second sentence (including the period) of this book.
     */
    public String getSecondSentence()
    {
        int begOfSentence = bookText.indexOf(".");
        int endOfSentence = bookText.indexOf(".",begOfSentence+1);
        return bookText.substring(begOfSentence+1,endOfSentence+1);
        // TODO: Get the second sentence
        // Locate the period of the first sentence
        // Return the substring consisting of everything after that period up to
        // the second period
    }

    /**
     * Calculates the number of characters (as in letters and
     * symbols, not people) in the book.
     * @return the number of letters and symbols in the book.
     */
    public int getNumCharacters()
    {
        return bookText.length();
    }

    /**
     * Finds where the string "Mad Hatter" occurs for the first time in the book.
     * @return the location of the first occurrence of the string
     */
    public int firstOccurrenceOfMadHatter()
    {
        return bookText.indexOf("Mad Hatter");
    }

    /**
     * A method to help read the book out of the file.
     * You don't have to read this unless you want to.
     * The "try" and "catch" are java's way of dealing with
     * runtime errors or "exceptions." For more info, see
     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html
     */
    public void readBook(String fileName)
    {
        bookText = "";
        try
        {
            Scanner file = new Scanner(new File(fileName));
            while (file.hasNextLine())
            {
                String line = file.nextLine();
                bookText += line + "\n";
            }
            file.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
}


// BlueJ Project: lesson4/book4
// Video: Working with the Book Text

import java.util.Scanner;
import java.io.File;

public class Book
{
    private String bookText;

    public Book(String fileName)
    {
        readBook(fileName);
    }

    /**
     * Gets the first sentence of this book.
     * @return the first sentence (including the period) of this book.
     */
    public String getFirstSentence()
    {
        int endOfSentence = bookText.indexOf(".");
        return bookText.substring(0, endOfSentence + 1);
    }

    /**
     * Gets the second sentence of this book.
     * @return the second sentence (including the period) of this book.
     */
    public String getSecondSentence()
    {
        // TODO: Get the second sentence
        // Locate the period of the first sentence
        // Return the substring consisting of everything after that period up to
        // the second period
        return bookText.substring((bookText.indexOf(".")+1),(bookText.indexOf(".",(bookText.indexOf(".")+1))+1));
    }

    /**
     * Calculates the number of characters (as in letters and
     * symbols, not people) in the book.
     * @return the number of letters and symbols in the book.
     */
    public int getNumCharacters()
    {
        return bookText.length();
    }

    /**
     * Finds where the string "Mad Hatter" occurs for the first time in the book.
     * @return the location of the first occurrence of the string
     */
    public int firstOccurrenceOfMadHatter()
    {
        return bookText.indexOf("Mad Hatter");
    }

    /**
     * A method to help read the book out of the file.
     * You don't have to read this unless you want to.
     * The "try" and "catch" are java's way of dealing with
     * runtime errors or "exceptions." For more info, see
     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html
     */
    public void readBook(String fileName)
    {
        bookText = "";
        try
        {
            Scanner file = new Scanner(new File(fileName));
            while (file.hasNextLine())
            {
                String line = file.nextLine();
                bookText += line + "\n";
            }
            file.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
}

public class BookTester
{
    public static void main(String[] args)
    {
        Book alice = new Book("chapter1.txt");

        // The sentence is pretty long, but it is in a single line
        System.out.println(alice.getSecondSentence());
        System.out.println("Expected: So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.");

        Book mary = new Book("mary.txt");

        // Here, the end-of-line markers are replaced with a space so that the actual and expected results fit on a line.
        System.out.println(mary.getSecondSentence().replace("\n", " "));
        System.out.println("Expected: And everywhere that Mary went, Mary went, Mary went, and everywhere that Mary went, the lamb was sure to go.");
    }
}

AQUÍ LO DEJÉ EN EL 2017.

Occurrence of Alice

 


// BlueJ Project: lesson4/book5
// Video: Working with the Book Text

import java.util.Scanner;
import java.io.File;

public class Book
{
    private String bookText;

    public Book(String fileName)
    {
        readBook(fileName);
    }

    /**
     *  Counts how many times "Alice" occurs in this book.
     *  @return the number of occurrences
     */
    public int occurrencesOfAlice()
    {
        // TODO: Find the number of times the word "Alice" occurs in this book
        
        String bookTexto = bookText.replace("Alice","l");
        int dif = bookText.length()-bookTexto.length();
        return (bookText.length()-bookTexto.length())/4;
    }

    /**
     * Gets the first sentence of this book.
     * @return the first sentence (including the period) of this book.
     */
    public String getFirstSentence()
    {
        int endOfSentence = bookText.indexOf(".");
        return bookText.substring(0, endOfSentence + 1);
        
    }
    
    /**
     * Gets the second sentence of this book.
     * @return the second sentence (including the period) of this book.
     */
    public String getSecondSentence()
    {
        int beginningOfSentence = bookText.indexOf(".") + 1;
        int endOfSentence = bookText.indexOf(".", beginningOfSentence);
        return bookText.substring(beginningOfSentence, endOfSentence + 1);
    }

    /**
     * Calculates the number of characters (as in letters and
     * symbols, not people) in the book.
     * @return the number of letters and symbols in the book.
     */
    public int getNumCharacters()
    {
        return bookText.length();
    }

    /**
     * Finds where the string "Mad Hatter" occurs for the first time in the book.
     * @return the location of the first occurrence of the string
     */
    public int firstOccurrenceOfMadHatter()
    {
        return bookText.indexOf("Mad Hatter");
    }

    /**
     * A method to help read the book out of the file.
     * You don't have to read this unless you want to.
     * the "try" and "catch" are java's way of dealing with
     * runtime errors or "exceptions." For more info, see
     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html
     */
    public void readBook(String fileName)
    {
        bookText = "";
        try
        {
            Scanner file = new Scanner(new File(fileName));
            while (file.hasNextLine())
            {
                String line = file.nextLine();
                bookText += line + "\n";
            }
            file.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
}

Occurrence of Any Word

 

Lets explain a bit more by what we mean as "one off". One off is something that you use only once.
In the context of this exercise:
The getOccurenceOfAlice() method works for finding the number of times that the word "Alice" appears in Alice in Wonderland. But we can change the method so we can use it to find any word in Alice in Wonderland.
Fact sheets: https://www.udacity.com/wiki/cs046/factsheets
(Look for Strings)

public class Book
{
    private String bookText;

    public Book(String fileName)
    {
        readBook(fileName);
    }

    /**
     * Counts how many times a given word occurs in this book.
     * @param word a word of length >= 1
     * @return the number of occurrences
     */
    public int occurrencesOf(String word)
    {
        
        // TODO: Complete this method
        String bookTexto = bookText.replace(word,"l");
        int dif = bookText.length()-bookTexto.length();
        return (bookText.length()-bookTexto.length())/(word.length()-1);

    }

    /**
     * Counts how many times "Alice" occurs in this book.
     * @return the number of occurrences
     */
    public int occurrencesOfAlice()
    {
        int length = bookText.length();
        int lengthWithoutAlice = bookText.replace("Alice", "").length();
        return (length - lengthWithoutAlice) / 5;
    }


    /**
     * Gets the first sentence of this book.
     * @return the first sentence (including the period) of this book.
     */
    public String getFirstSentence()
    {
        int endOfSentence = bookText.indexOf(".");
        return bookText.substring(0, endOfSentence + 1);
    }

    /**
     * Gets the second sentence of this book.
     * @return the second sentence (including the period) of this book.
     */
    public String getSecondSentence()
    {
        int beginningOfSentence = bookText.indexOf(".") + 1;
        int endOfSentence = bookText.indexOf(".", beginningOfSentence);
        return bookText.substring(beginningOfSentence, endOfSentence + 1);
    }

    /**
     * Calculates the number of characters (as in letters and
     * symbols, not people) in the book.
     * @return the number of letters and symbols in the book.
     */
    public int getNumCharacters()
    {
        return bookText.length();
    }

    /**
     * Finds where the string "Mad Hatter" occurs for the first time in the book.
     * @return the location of the first occurrence of the string
     */
    public int firstOccurrenceOfMadHatter()
    {
        return bookText.indexOf("Mad Hatter");
    }

    /**
     * A method to help read the book out of the file.
     * You don't have to read this unless you want to.
     * The "try" and "catch" are java's way of dealing with
     * runtime errors or "exceptions." For more info, see
     * https://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html
     */
    public void readBook(String fileName)
    {
        bookText = "";
        try
        {
            Scanner file = new Scanner(new File(fileName));
            while (file.hasNextLine())
            {
                String line = file.nextLine();
                bookText += line + "\n";
            }
            file.close();
        }
        catch (Exception e)
        {
            System.out.println(e);
        }
    }
}
